/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.Color;
import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author leeco
 */
public class Home extends javax.swing.JFrame {

    private Thread[] threads = new Thread[1000000];
    private int currThread = -1;
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    
    private int[] arrays;
    private JButton[] items;
    
    private int hPnlChiSo;
    private int wPnlChiSo;

    private int hPnlMoPhong;
    private int wPnlMoPhong;

    int time = 500;
    int stop=1;
    
    public Home() {
        initComponents();
        LoadForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        btnThuCong = new javax.swing.JButton();
        btnRandom = new javax.swing.JButton();
        btnFile = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        slTocDo = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        btnBatDau = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        rbSelection = new javax.swing.JRadioButton();
        rbInterchange = new javax.swing.JRadioButton();
        rbBubble = new javax.swing.JRadioButton();
        rbInsertion = new javax.swing.JRadioButton();
        rbShell = new javax.swing.JRadioButton();
        rbHeap = new javax.swing.JRadioButton();
        rbQuick = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        rbTang = new javax.swing.JRadioButton();
        rbGiam = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsCode = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pnlChiSo = new javax.swing.JPanel();
        pnlMoPhong = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));

        jPanel5.setBackground(new java.awt.Color(0, 102, 102));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dữ liệu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(153, 153, 255))); // NOI18N

        jPanel11.setBackground(new java.awt.Color(0, 102, 102));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tạo mảng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), new java.awt.Color(153, 153, 255))); // NOI18N

        btnThuCong.setBackground(new java.awt.Color(204, 204, 255));
        btnThuCong.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnThuCong.setText("Thủ công");
        btnThuCong.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnThuCong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThuCongActionPerformed(evt);
            }
        });

        btnRandom.setBackground(new java.awt.Color(204, 204, 255));
        btnRandom.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnRandom.setText("Random");
        btnRandom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        btnFile.setBackground(new java.awt.Color(204, 204, 255));
        btnFile.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnFile.setText("File");
        btnFile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnFile, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(btnRandom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnThuCong, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                .addGap(31, 31, 31))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnThuCong, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRandom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnRandom, btnThuCong});

        jPanel10.setBackground(new java.awt.Color(0, 102, 102));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bảng điều khiển", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), new java.awt.Color(153, 153, 255))); // NOI18N

        slTocDo.setMaximum(5);
        slTocDo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        slTocDo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slTocDoStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Tốc độ");

        btnBatDau.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnBatDau.setText("Bắt Đầu");
        btnBatDau.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnBatDau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatDauActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(slTocDo, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(btnBatDau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(slTocDo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(btnBatDau, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(0, 51, 51));

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thuật toán", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(153, 153, 255))); // NOI18N

        rbSelection.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(rbSelection);
        rbSelection.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbSelection.setForeground(new java.awt.Color(255, 255, 255));
        rbSelection.setText("Selection Sort");
        rbSelection.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbSelectionStateChanged(evt);
            }
        });
        rbSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSelectionActionPerformed(evt);
            }
        });

        rbInterchange.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(rbInterchange);
        rbInterchange.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbInterchange.setForeground(new java.awt.Color(255, 255, 255));
        rbInterchange.setText("Interchange Sort");
        rbInterchange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbInterchangeStateChanged(evt);
            }
        });

        rbBubble.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(rbBubble);
        rbBubble.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbBubble.setForeground(new java.awt.Color(255, 255, 255));
        rbBubble.setText("Bubble Sort");
        rbBubble.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbBubbleStateChanged(evt);
            }
        });
        rbBubble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBubbleActionPerformed(evt);
            }
        });

        rbInsertion.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(rbInsertion);
        rbInsertion.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbInsertion.setForeground(new java.awt.Color(255, 255, 255));
        rbInsertion.setText("Insertion Sort");
        rbInsertion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbInsertionStateChanged(evt);
            }
        });

        rbShell.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(rbShell);
        rbShell.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbShell.setForeground(new java.awt.Color(255, 255, 255));
        rbShell.setText("Shell Sort");
        rbShell.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbShellStateChanged(evt);
            }
        });
        rbShell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbShellActionPerformed(evt);
            }
        });

        rbHeap.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(rbHeap);
        rbHeap.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbHeap.setForeground(new java.awt.Color(255, 255, 255));
        rbHeap.setText("Head Sort");
        rbHeap.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbHeapStateChanged(evt);
            }
        });

        rbQuick.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(rbQuick);
        rbQuick.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbQuick.setForeground(new java.awt.Color(255, 255, 255));
        rbQuick.setText("Quick Sort");
        rbQuick.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbQuickStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbInterchange, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(rbBubble, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbInsertion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbShell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbHeap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbQuick, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(rbSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbInterchange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbBubble, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbInsertion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbShell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbHeap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbQuick, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );

        jPanel8.setBackground(new java.awt.Color(0, 102, 102));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hướng sắp xếp", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(153, 153, 255))); // NOI18N

        rbTang.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup2.add(rbTang);
        rbTang.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbTang.setForeground(new java.awt.Color(255, 255, 255));
        rbTang.setText("Tăng dần");
        rbTang.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbTangStateChanged(evt);
            }
        });

        rbGiam.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup2.add(rbGiam);
        rbGiam.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rbGiam.setForeground(new java.awt.Color(255, 255, 255));
        rbGiam.setText("Giảm dần");
        rbGiam.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbGiamStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(rbTang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(13, 13, 13)
                .addComponent(rbGiam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(rbTang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbGiam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(0, 102, 102));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Code", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(153, 153, 255))); // NOI18N

        lsCode.setBackground(new java.awt.Color(204, 204, 255));
        lsCode.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jScrollPane1.setViewportView(lsCode);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel3.setBackground(new java.awt.Color(0, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Khung mô phỏng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel3.setBackground(new java.awt.Color(255, 204, 204));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("A[ ]");

        pnlChiSo.setBackground(new java.awt.Color(204, 255, 204));
        pnlChiSo.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                pnlChiSoAncestorResized(evt);
            }
        });
        pnlChiSo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                pnlChiSoComponentResized(evt);
            }
        });

        javax.swing.GroupLayout pnlChiSoLayout = new javax.swing.GroupLayout(pnlChiSo);
        pnlChiSo.setLayout(pnlChiSoLayout);
        pnlChiSoLayout.setHorizontalGroup(
            pnlChiSoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlChiSoLayout.setVerticalGroup(
            pnlChiSoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlMoPhong.setBackground(new java.awt.Color(204, 204, 255));
        pnlMoPhong.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                pnlMoPhongComponentResized(evt);
            }
        });

        javax.swing.GroupLayout pnlMoPhongLayout = new javax.swing.GroupLayout(pnlMoPhong);
        pnlMoPhong.setLayout(pnlMoPhongLayout);
        pnlMoPhongLayout.setHorizontalGroup(
            pnlMoPhongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlMoPhongLayout.setVerticalGroup(
            pnlMoPhongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlMoPhong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlChiSo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMoPhong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(pnlChiSo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jMenuBar1.setBackground(new java.awt.Color(0, 51, 51));
        jMenuBar1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 1, true));

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbShellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbShellActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbShellActionPerformed

    private void rbSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSelectionActionPerformed

    }//GEN-LAST:event_rbSelectionActionPerformed

    private void rbBubbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBubbleActionPerformed

    }//GEN-LAST:event_rbBubbleActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed

        JFileChooser fc = new JFileChooser();
        
        int k = fc.showOpenDialog(this);
        if (k == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            String d = f.toString();
            arrays = ReadFile(d);
            items = new JButton[arrays.length];
            for(int i=0;i<arrays.length;i++){
                items[i]=new JButton(arrays[i]+"");
            }
            DrawMang(pnlMoPhong, pnlChiSo, items);
            btnBatDau.setEnabled(true);
        }
        
    }//GEN-LAST:event_btnFileActionPerformed

    private void pnlChiSoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlChiSoComponentResized
 
    }//GEN-LAST:event_pnlChiSoComponentResized

    private void pnlChiSoAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_pnlChiSoAncestorResized
        
    }//GEN-LAST:event_pnlChiSoAncestorResized

    private void pnlMoPhongComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlMoPhongComponentResized

    }//GEN-LAST:event_pnlMoPhongComponentResized

    private void rbBubbleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbBubbleStateChanged
        if (rbBubble.isSelected()) {
            listModel.removeAllElements();
            BubbleSortJList();
            lsCode.setModel(listModel);
            lsCode.setSelectedIndex(0);     
        }
    }//GEN-LAST:event_rbBubbleStateChanged

    private void btnBatDauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatDauActionPerformed

        btnBatDau.setEnabled(false);
        if(rbBubble.isSelected()){
            if(rbTang.isSelected()){
                 BubbleSortTang(arrays);
            }else{
                BubbleSortGiam(arrays);
            }
        }
        if(rbSelection.isSelected()){
            if(rbTang.isSelected()){
                SelectionSortTang(arrays);
            }else{
                SelectionSortGiam(arrays);
            }
        }
        if(rbInsertion.isSelected()){
            if(rbTang.isSelected()){
                InsertionSortTang(arrays);
            }else{
               InsertionSortGiam(arrays);
            }
        }
        if(rbInterchange.isSelected()){
            if(rbTang.isSelected()){
                InterchangeSortTang(arrays);
            }else{
               InterchangeSortGiam(arrays);
            }
        }
        if(rbShell.isSelected()){
            if(rbTang.isSelected()){
                ShellSortTang(arrays);
            }else{
               ShellSortGiam(arrays);
            }
        }
        if(rbQuick.isSelected()){
                QuickSort();
        }
        if(rbHeap.isSelected()){
            HeapSort(arrays);
        }
        
    }//GEN-LAST:event_btnBatDauActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized

//         if(arrays!=null && items!=null){
//             DrawMang(pnlMoPhong, pnlChiSo, items);
//         }
    }//GEN-LAST:event_formComponentResized

    private void rbSelectionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbSelectionStateChanged
        if (rbSelection.isSelected()) {
            listModel.removeAllElements();
            SelectionSortJList();
            lsCode.setModel(listModel);
            lsCode.setSelectedIndex(0);     
        }
    }//GEN-LAST:event_rbSelectionStateChanged

    private void rbInterchangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbInterchangeStateChanged
         if (rbInterchange.isSelected()) {
            listModel.removeAllElements();
            InterchangeSortJList();
            lsCode.setModel(listModel);
            lsCode.setSelectedIndex(0);     
        }
    }//GEN-LAST:event_rbInterchangeStateChanged

    private void rbInsertionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbInsertionStateChanged
           if (rbInsertion.isSelected()) {
            listModel.removeAllElements();
            InsertionSortJList();
            lsCode.setModel(listModel);
            lsCode.setSelectedIndex(0);     
        } 
    }//GEN-LAST:event_rbInsertionStateChanged

    private void rbTangStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbTangStateChanged
        if(rbTang.isSelected()){
            if(rbBubble.isSelected()){
                listModel.setElementAt("          if (a[j] < a[j - 1]) {", 4);
            }
            if(rbSelection.isSelected()){
                listModel.setElementAt("          if (a[j] < a[min]) {", 6);
            }
            if(rbInsertion.isSelected()){
                listModel.setElementAt("      while (j > 0 && a[j - 1] > tam) {", 5);
            }
            if(rbInterchange.isSelected()){
                listModel.setElementAt("          if (a[j] < a[i]) {", 4);
            }
             if(rbShell.isSelected()){
                listModel.setElementAt("            while (j >= 0 && x < a[i]) {",6);
            }
            if(rbQuick.isSelected()){
                  listModel.setElementAt("     while (arr[i] < pivot) {",9);
                  listModel.setElementAt("      while (arr[j] > pivot) {",12);
            }
            if(rbHeap.isSelected()){
                listModel.setElementAt("  if (l < n && arr[l] > arr[largest])",15);
                listModel.setElementAt("  if (r < n && arr[r] > arr[largest])",17);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_rbTangStateChanged

    private void rbGiamStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbGiamStateChanged
        if(rbGiam.isSelected()){
            if(rbBubble.isSelected()){
                listModel.setElementAt("          if (a[j] > a[j - 1]) {", 4);
            }
            if(rbSelection.isSelected()){
                listModel.setElementAt("          if (a[j] > a[min]) {", 6);
            }
            if(rbInsertion.isSelected()){
                listModel.setElementAt("          while ((pos >= 0) && (a[pos] < x)) {", 6);
            }
            if(rbInterchange.isSelected()){
                listModel.setElementAt("          if (a[j] > a[i]) {", 4);
            }
            if(rbShell.isSelected()){
                listModel.setElementAt("            while (j >= 0 && x > a[i]) {",6);
            }
            if(rbQuick.isSelected()){
                  listModel.setElementAt("     while (arr[i] > pivot) {",9);
                  listModel.setElementAt("      while (arr[j] < pivot) {",12);
            }
            if(rbHeap.isSelected()){
                listModel.setElementAt("  if (l < n && arr[l] < arr[largest])",15);
                listModel.setElementAt("  if (r < n && arr[r] < arr[largest])",17);
            }
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_rbGiamStateChanged

    private void btnThuCongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThuCongActionPerformed

            JPanel pn=new JPanel();
            pn.setLayout(new BoxLayout (pn, BoxLayout.Y_AXIS));
            JLabel lb=new JLabel("Nhập vào các phần tử mảng,các phần tử cách nhau bởi khoảng trắng");
            
            JTextField textMang=new JTextField();
            pn.add(lb);
            pn.add(textMang);
            int outPut= JOptionPane.showConfirmDialog(this,
                        pn,
                        "Nhập Mảng",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.PLAIN_MESSAGE);
        if(outPut==JOptionPane.OK_OPTION){
            String[] arr=textMang.getText().split(" ");
            arrays=new int[arr.length];
            items = new JButton[arr.length];
            for(int i=0;i<arr.length;i++){
                arrays[i]=Integer.parseInt(arr[i]);
                items[i]=new JButton(arrays[i]+"");
            }
        DrawMang(pnlMoPhong, pnlChiSo, items);
        btnBatDau.setEnabled(true);
        }
    }//GEN-LAST:event_btnThuCongActionPerformed

    private void slTocDoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slTocDoStateChanged
        time=slTocDo.getValue()*250;
        // TODO add your handling code here:
    }//GEN-LAST:event_slTocDoStateChanged

    private void rbShellStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbShellStateChanged

        if (rbShell.isSelected()) {
            listModel.removeAllElements();
            ShellSortJList();
            lsCode.setModel(listModel);
            lsCode.setSelectedIndex(0);     
        } 
        // TODO add your handling code here:
    }//GEN-LAST:event_rbShellStateChanged

    private void rbHeapStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbHeapStateChanged
        if (rbHeap.isSelected()) {
            listModel.removeAllElements();
            HeapSortJList();
            lsCode.setModel(listModel);
            lsCode.setSelectedIndex(0);     
        } 
        // TODO add your handling code here:
    }//GEN-LAST:event_rbHeapStateChanged

    private void rbQuickStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbQuickStateChanged
        if (rbQuick.isSelected()) {
            listModel.removeAllElements();
            QuickSortJList();
            lsCode.setModel(listModel);
            lsCode.setSelectedIndex(0);     
        } 
        // TODO add your handling code here:
    }//GEN-LAST:event_rbQuickStateChanged

    private void btnRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomActionPerformed
    
        JPanel pn=new JPanel();
            pn.setLayout(new BoxLayout (pn, BoxLayout.Y_AXIS));
            JLabel lb=new JLabel("Nhập vào số phần tử của mảng : ");
            JTextField textMang=new JTextField();
            pn.add(lb);
            pn.add(textMang);
            int outPut= JOptionPane.showConfirmDialog(this,
                        pn,
                        "Số lượng",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.PLAIN_MESSAGE);
        if(outPut==JOptionPane.OK_OPTION){
            int n=Integer.parseInt(textMang.getText());
            arrays=new int[n];
            items = new JButton[n];
            Random rd=new Random();
            for(int i=0;i<n;i++){
                int vl=1+rd.nextInt(200);
                arrays[i]=vl;
                items[i]=new JButton(vl+"");
            }
        DrawMang(pnlMoPhong, pnlChiSo, items);
        btnBatDau.setEnabled(true);
        }
    }//GEN-LAST:event_btnRandomActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatDau;
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnRandom;
    private javax.swing.JButton btnThuCong;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lsCode;
    private javax.swing.JPanel pnlChiSo;
    private javax.swing.JPanel pnlMoPhong;
    private javax.swing.JRadioButton rbBubble;
    private javax.swing.JRadioButton rbGiam;
    private javax.swing.JRadioButton rbHeap;
    private javax.swing.JRadioButton rbInsertion;
    private javax.swing.JRadioButton rbInterchange;
    private javax.swing.JRadioButton rbQuick;
    private javax.swing.JRadioButton rbSelection;
    private javax.swing.JRadioButton rbShell;
    private javax.swing.JRadioButton rbTang;
    private javax.swing.JSlider slTocDo;
    // End of variables declaration//GEN-END:variables

    private void LoadForm() {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        hPnlChiSo = pnlChiSo.getHeight();
        wPnlChiSo = pnlChiSo.getWidth();

        wPnlMoPhong = pnlMoPhong.getWidth();
        hPnlMoPhong = pnlMoPhong.getHeight();

        SetStateStart();
    }
    public void BubbleSortJList() {
        listModel.addElement("public void BubbleSort(int[] arr) {");
        listModel.addElement("  int n = a.length;");
        listModel.addElement("  for (int i = 0; i < n - 1; i++) {");
        listModel.addElement("      for (int j = n - 1; j > i; j--) {");
         listModel.addElement("          if (a[j] < a[j - 1]) {");
        listModel.addElement("          int tam = a[j];");
        listModel.addElement("          a[j] = a[j - 1];");
        listModel.addElement("          a[j - 1] = tam;");
        listModel.addElement("          }");
        listModel.addElement("      }");
        listModel.addElement("  }");
        listModel.addElement("}");
    }
    public void SelectionSortJList(){
        listModel.addElement("public static void SelectionSort(int a[]) {");
        listModel.addElement("  int n = a.length;");
        listModel.addElement("  int min;");
        listModel.addElement("  for (int i = 0; i < n - 1; i++) {");
        listModel.addElement("      min = i;");
        listModel.addElement("      for (int j = min; j < n; j++) {");
        listModel.addElement("          if (a[j] < a[min]) {");
        listModel.addElement("              min = j;");
        listModel.addElement("          }");
        listModel.addElement("      }");
        listModel.addElement("      int tam = a[i];");
        listModel.addElement("      a[i] = a[min];");
        listModel.addElement("      a[min] = tam;");
        listModel.addElement(" }");
        listModel.addElement("}");
    }
    public void InterchangeSortJList(){
        listModel.addElement("public static void InterchangeSort(int[] a) {");
        listModel.addElement("  int n = a.length;");
        listModel.addElement("  for (int i = 0; i < n - 1; i++) {");
        listModel.addElement("      for (int j = i + 1; j < n; j++) {");
        listModel.addElement("          if (a[j] < a[i]) {");
        listModel.addElement("              int tam = a[i];");
        listModel.addElement("              a[i] = a[j];");
        listModel.addElement("              a[j] = tam;");
        listModel.addElement("          }");
        listModel.addElement("      }");
        listModel.addElement("  }");
        listModel.addElement("}");
    }
    public void InsertionSortJList(){
        listModel.addElement("void InsertionSort(int a[], int n ) {");
        listModel.addElement("     int pos, i;");
        listModel.addElement("     int x;");
        listModel.addElement("     for(i = 1; i < n; i++) {");
        listModel.addElement("          x = a[i];");
        listModel.addElement("          pos = i - 1;");
        listModel.addElement("          while ((pos >= 0) && (a[pos] > x)) {");
        listModel.addElement("               a[pos+1] = a[pos];");
        listModel.addElement("               pos--;");
        listModel.addElement("          }");
        listModel.addElement("     a[pos+1] = x];");
        listModel.addElement("     }");
        listModel.addElement("}");
    }
    public void QuickSortJList(){
        listModel.addElement("public void SortTang(int arr[],int low,int high){");
        listModel.addElement("  if (arr == null || arr.length == 0)");
        listModel.addElement("      return;");
        listModel.addElement("  if (low > high)");
        listModel.addElement("      return;");
        listModel.addElement("  int middle = low + (high - low) / 2;");
        listModel.addElement("  int pivot = arr[middle];");
        listModel.addElement("  int i = low, j = high;");
        listModel.addElement("  while (i <= j) {");
        listModel.addElement("      while (arr[i] < pivot) {");
        listModel.addElement("          i++;");
        listModel.addElement("      }");
        listModel.addElement("      while (arr[j] > pivot) {");
        listModel.addElement("          j--;");
        listModel.addElement("       }");
        listModel.addElement("      if (i <=j) {");
        listModel.addElement("          int temp = arr[i];");
        listModel.addElement("          arr[i] = arr[j];");
        listModel.addElement("          arr[j] = temp;");
        listModel.addElement("          i++;");
        listModel.addElement("          j--;");
        listModel.addElement("      } ");
        listModel.addElement("      if (low < j)");
        listModel.addElement("          SortTang(arr, low, j);");
        listModel.addElement("      if (high > i)");
        listModel.addElement("          SortTang(arr, i, high);");
        listModel.addElement("  }");
        listModel.addElement("}");
    }
    public void ShellSortJList(){
        listModel.addElement("void ShellSort(int a[], int n) {");
        listModel.addElement("    int len, i, j, x;");
        listModel.addElement("    for (len = 11; len > 0; len /= 2) {");
        listModel.addElement("        for (i = len; i < n; i++) {");
        listModel.addElement("            x = a[i];");
        listModel.addElement("            j = i - len;");
        listModel.addElement("            while (j >= 0 && x < a[i]) {");
        listModel.addElement("                a[j + len] = a[j];");
        listModel.addElement("            }");
        listModel.addElement("            j -= len;");
        listModel.addElement("        }");
        listModel.addElement("        a[j + len] = x;");
        listModel.addElement("    }");
        listModel.addElement("}");
    }
    public void HeapSortJList(){
        listModel.addElement("public void HeapSortTang(int arr[]){");
        listModel.addElement("  int n = arr.length;");
        listModel.addElement("  for (int i = n / 2 - 1; i >= 0; i--)");
        listModel.addElement("      heapifyTang(arr, n, i);");
        listModel.addElement("  for (int i=n-1; i>=0; i--){");
        listModel.addElement("      int temp = arr[0];");
        listModel.addElement("      arr[0] = arr[i];");
        listModel.addElement("      arr[i] = temp;");
        listModel.addElement("      heapifyTang(arr, i, 0);");
        listModel.addElement("  }");
        listModel.addElement("}");
        listModel.addElement("void heapifyTang(int arr[], int n, int i){");
        listModel.addElement("  int largest = i;");
        listModel.addElement("  int l = 2*i + 1;");
        listModel.addElement("  int r = 2*i + 2;");
        listModel.addElement("  if (l < n && arr[l] > arr[largest])");
        listModel.addElement("      largest = l;");
        listModel.addElement("  if (r < n && arr[r] > arr[largest])");
        listModel.addElement("      largest = r;");
        listModel.addElement("  if (largest != i)");
        listModel.addElement("  {");
        listModel.addElement("  int swap = arr[i];");
        listModel.addElement("  arr[i] = arr[largest];");
        listModel.addElement("  arr[largest] = swap;");
        listModel.addElement("  heapifyTang(arr, n, largest);");
        listModel.addElement("}");
    }	
    public void BubbleSortTang(int[] arr) {
        SetIndexList(0);
        int n = arr.length;
        SetIndexList(1);
        for (int i = 0; i < n - 1; i++) {
            SetIndexList(2);
            for (int j = n - 1; j > i; j--) {
                SetIndexList(3);
                if (arr[j] < arr[j - 1]) {
                    SetIndexList(4);
                    int tam = arr[j];
                    arr[j] = arr[j - 1];
                    arr[j - 1] = tam;
                    Swap(items[j-1], items[j]);
                }
                SetIndexList(9);
            }
            SetIndexList(10);
        }
        SetIndexList(11);
    }
    public void BubbleSortGiam(int[] arr) {
        SetIndexList(0);
        int n = arr.length;
        SetIndexList(1);
        for (int i = 0; i < n - 1; i++) {
            SetIndexList(2);
            for (int j = n - 1; j > i; j--) {
                SetIndexList(3);
                if (arr[j] > arr[j - 1]) {
                    SetIndexList(4);
                    int tam = arr[j];
                    arr[j] = arr[j - 1];
                    arr[j - 1] = tam;
                    Swap(items[j-1], items[j]);
                }
                SetIndexList(9);
            }
            SetIndexList(10);
        }
        SetIndexList(11);
    }
    public void SelectionSortTang(int a[]) {
        int n = a.length;
        SetIndexList(1);
        int min;
        SetIndexList(2);
        for (int i = 0; i < n - 1; i++) {
            SetIndexList(3);
            min = i;
            SetIndexList(4);
            for (int j = min; j < n; j++) {
                SetIndexList(5);
                if (a[j] < a[min]) {
                    SetIndexList(6);
                    min = j;
                    SetIndexList(7);
                }
                SetIndexList(8);
            }
            SetIndexList(9);
            int tam = a[i];
            a[i] = a[min];
            a[min] = tam;
            Swap(items[i], items[min]);
        }
        SetIndexList(13);
    }
    public void SelectionSortGiam(int a[]) {
        int n = a.length;
        SetIndexList(1);
        int min;
        SetIndexList(2);
        for (int i = 0; i < n - 1; i++) {
            SetIndexList(3);
            min = i;
            SetIndexList(4);
            for (int j = min; j < n; j++) {
                SetIndexList(5);
                if (a[j] > a[min]) {
                    SetIndexList(6);
                    min = j;
                    SetIndexList(7);
                }
                SetIndexList(8);
            }
            SetIndexList(9);
            int tam = a[i];
            a[i] = a[min];
            a[min] = tam;
            SetIndexList(12);
             Swap(items[i], items[min]);
        }
    }
     public void InterchangeSortTang(int a[]){
         int n = a.length;
         SetIndexList(1);
        for (int i = 0; i < n - 1; i++) {
             SetIndexList(2);
            for (int j = i + 1; j < n; j++) {
                 SetIndexList(3);
                if (a[j] < a[i]) {
                     SetIndexList(4);
                    int tam = a[i];
                    a[i] = a[j];
                    a[j] = tam;
                    Swap(items[i], items[j]);
                }
                 SetIndexList(5);
            }
             SetIndexList(6);
        }
         SetIndexList(7);
    }
    public void InterchangeSortGiam(int a[]){
        int n = a.length;
         SetIndexList(1);
        for (int i = 0; i < n - 1; i++) {
             SetIndexList(2);
            for (int j = i + 1; j < n; j++) {
                 SetIndexList(3);
                if (a[j] > a[i]) {
                     SetIndexList(4);
                    int tam = a[i];
                    a[i] = a[j];
                    a[j] = tam;
                    Swap(items[i], items[j]);
                }
                 SetIndexList(5);
            }
             SetIndexList(6);
        }
         SetIndexList(7);
    }
    
    public void InsertionSortTang(int a[]){
        int pos, i;
            SetIndexList(0);
            int x;
            SetIndexList(2);
            for (i = 1; i < a.length; i++) {
                SetIndexList(3);
                x = arrays[i];
                SetIndexList(4);
                pos = i - 1;
                SetIndexList(5);
                while ((pos >= 0) && (arrays[pos] > x)) {
                    SetIndexList(6);
                    arrays[pos + 1] = arrays[pos];
                    SetIndexList(7);
                    if (pos > 0 && arrays[pos - 1] <= x) {
                        Move(items[pos + 1], items[pos], 0);
                    } else {
                        Move(items[pos + 1], items[pos], pos);
                    }
                    pos--;
                    SetIndexList(8);
                }
                SetIndexList(9);
                arrays[pos + 1] = x;
            }
            SetIndexList(0);
        }   
    public void InsertionSortGiam(int a[]){
        
    }
    public void Move(JButton btn1, JButton btn2, int pos) {
        int x1 = btn1.getX();
        int x2 = btn2.getX();
        int hei=btn1.getHeight();
        int wi=btn1.getWidth()/5;
        currThread++;

        int cur = currThread;
        threads[cur] = new Thread(new Runnable() {
            @Override
            public void run() {
                    if (cur != 0) {
                        try {
                            threads[cur - 1].join();
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    btn1.setBackground(Color.BLUE);
                    btn2.setBackground(Color.BLUE);
                    
                    while (btn1.getY() > 0) {
                        btn1.setLocation(btn1.getX(), btn1.getY() - hei);
                        try {
                            Thread.sleep(time);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    while (btn1.getX() > x2) {
                        btn2.setLocation(btn2.getX() + wi, btn2.getY());
                        btn1.setLocation(btn1.getX() - wi, btn1.getY());
                        try {
                            Thread.sleep(time);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    while (pos == 0 && btn1.getY() < hei*2) {
                        btn1.setLocation(btn1.getX(), btn1.getY() + hei);
                        try {
                            Thread.sleep(time);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    String txtbtn1 = btn1.getText();
                    btn1.setText(btn2.getText());
                    btn2.setText(txtbtn1);
                    int y1 = btn1.getY();
                    btn1.setLocation(x1, btn2.getY());
                    btn2.setLocation(x2, y1);
                    btn1.setBackground(Color.YELLOW);
                    if (pos == 0) {
                        btn2.setBackground(Color.YELLOW);
                    }
            }
        });
        threads[cur].start();
    }
    
    public void ShellSortTang(int a[]){
        int len, i, j, x;
            SetIndexList(1);
            for (len = 11; len > 0; len /= 2) {
                SetIndexList(2);
                for (i = len; i < a.length; i++) {
                    SetIndexList(3);
                    x = arrays[i];
                    SetIndexList(4);
                    j = i - len;
                    SetIndexList(5);
                    while (j >= 0 && x < arrays[j]) {
                        SetIndexList(6);
                        arrays[j + len] = arrays[j];
                        SetIndexList(7);
                        if (len > 1) {
                            if (j < len) {
                                MoveShell(items[j + len], items[j], 0);
                            } else {
                                if (x >= arrays[j - len]) {
                                    MoveShell(items[j + len], items[j], 0);
                                } else {
                                    MoveShell(items[j + len], items[j], 1);
                                }
                            }
                        } else {
                            if (j < len) {
                                Move(items[j + len], items[j], 0);
                            } else {
                                if (x >= arrays[j - len]) {
                                    Move(items[j + len], items[j], 0);
                                } else {
                                    Move(items[j + len], items[j], 1);
                                }
                            }
                        }
                        j -= len;
                        SetIndexList(8);
                    }
                    arrays[j + len] = x;
                    SetIndexList(9);
                }
            }
            SetIndexList(0);
    }
    public void ShellSortGiam(int a[]){
        int len, i, j, x;
            SetIndexList(1);
            for (len = 11; len > 0; len /= 2) {
                SetIndexList(2);
                for (i = len; i < a.length; i++) {
                    SetIndexList(3);
                    x = arrays[i];
                    SetIndexList(4);
                    j = i - len;
                    SetIndexList(5);
                    while (j >= 0 && x > arrays[j]) {
                        SetIndexList(6);
                        arrays[j + len] = arrays[j];
                        SetIndexList(7);
                        if (len > 1) {
                            if (j < len) {
                                MoveShell(items[j + len], items[j], 0);
                            } else {
                                if (x >= arrays[j - len]) {
                                    MoveShell(items[j + len], items[j], 0);
                                } else {
                                    MoveShell(items[j + len], items[j], 1);
                                }
                            }
                        } else {
                            if (j < len) {
                                Move(items[j + len], items[j], 0);
                            } else {
                                if (x >= arrays[j - len]) {
                                    Move(items[j + len], items[j], 0);
                                } else {
                                    Move(items[j + len], items[j], 1);
                                }
                            }
                        }
                        j -= len;
                        SetIndexList(8);
                    }
                    arrays[j + len] = x;
                    SetIndexList(9);
                }
            }
            SetIndexList(0);
    }   
    public void MoveShell(JButton btn1, JButton btn2, int next) {
        int x1 = btn1.getX();
        int x2 = btn2.getX();
        int hei=btn1.getHeight();
        int wi=btn1.getWidth()/5;
        currThread++;

        int cur = currThread;
        threads[cur] = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (cur != 0) {
                        threads[cur - 1].join();
                    }
                    btn1.setBackground(Color.BLUE);
                     btn2.setBackground(Color.BLUE);
                    int k=0;
                    while (k<2) {
                        k++;
                        if (btn1.getY() > 0) {
                            btn1.setLocation(btn1.getX(), btn1.getY() - hei);
                        }
                        btn2.setLocation(btn2.getX(), btn2.getY() + hei);
                        Thread.sleep(time);
                    }
                    while (btn1.getX() > x2) {
                        btn2.setLocation(btn2.getX() + wi, btn2.getY());
                        btn1.setLocation(btn1.getX() - wi, btn1.getY());
                        Thread.sleep(time);
                    }
                    int h=0;
                    while (h<2) {
                        h++;
                        if (next == 0) {
                            btn1.setLocation(btn1.getX(), btn1.getY() + hei);
                        }
                        btn2.setLocation(btn2.getX(), btn2.getY() - hei);
                        Thread.sleep(time);
                    }
                    String txtbtn1 = btn1.getText();
                    btn1.setText(btn2.getText());
                    btn2.setText(txtbtn1);
                    int y1 = btn1.getY();
                    btn1.setLocation(x1, btn2.getY());
                    btn2.setLocation(x2, y1);
                    if (next == 0) {
                         btn1.setBackground(Color.YELLOW);
                          btn2.setBackground(Color.YELLOW);
                    } else {
                        btn1.setBackground(Color.YELLOW);
                    }
                } catch (Exception e) {
                }
            }
        });
        threads[cur].start();
    }
    
    public void QuickSort() {
       int low=0;
       int high=arrays.length-1;
       if(rbTang.isSelected()){
           SortTang(arrays,low,high);
       }
       if(rbGiam.isSelected()){
           SortGiam(arrays,low,high);
       }
       
       
     }
    public void SortTang(int arr[],int low,int high){
       if (arr == null || arr.length == 0)
			return;
		if (low > high)
			return;
		int middle = low + (high - low) / 2;
		int pivot = arr[middle];
		int i = low, j = high;
		while (i <= j) {
			while (arr[i] < pivot) {
				i++;
			}
			while (arr[j] > pivot) {
				j--;
			}
			if (i <=j) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
                                Swap(items[i], items[j]);
				i++;
				j--;                             
			} 
		if (low < j)
			SortTang(arr, low, j);
 
		if (high > i)
			SortTang(arr, i, high);
	}
   }
    public void SortGiam(int arr[],int low,int high){
       if (arr == null || arr.length == 0)
			return;
		if (low > high)
			return;
		int middle = low + (high - low) / 2;
		int pivot = arr[middle];
		int i = low, j = high;
		while (i <= j) {
			while (arr[i] > pivot) {
				i++;
			}
			while (arr[j] < pivot) {
				j--;
			}
			if (i <= j) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
                                Swap(items[i], items[j]);
				i++;
				j--;                             
			} 
		if (low < j)
			SortGiam(arr, low, j);
 
		if (high > i)
			SortGiam(arr, i, high);
	}
   }
    
    public void HeapSort(int arr[]){
        int n = arr.length;
        if(rbTang.isSelected()){
            for (int i = n / 2 - 1; i >= 0; i--)
                heapifyTang(arr, n, i);
            for (int i=n-1; i>=0; i--)
            {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
            Swap(items[0], items[i]);
            heapifyTang(arr, i, 0);
            }
        }
        if(rbGiam.isSelected()){
            for (int i = n / 2 - 1; i >= 0; i--)
                heapifyGiam(arr, n, i);
            for (int i=n-1; i>=0; i--)
            {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
            Swap(items[0], items[i]);
            heapifyGiam(arr, i, 0);
            }
        }
        
    }
    void heapifyTang(int arr[], int n, int i){
        int largest = i;
        int l = 2*i + 1;
        int r = 2*i + 2;

        if (l < n && arr[l] > arr[largest])
            largest = l;
        if (r < n && arr[r] > arr[largest])
            largest = r;
        if (largest != i)
        {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;
            Swap(items[i], items[largest]);
            heapifyTang(arr, n, largest);
        }
    }
    void heapifyGiam(int arr[], int n, int i){
        int largest = i;
        int l = 2*i + 1;
        int r = 2*i + 2;

        if (l < n && arr[l] < arr[largest])
            largest = l;
        if (r < n && arr[r] < arr[largest])
            largest = r;
        if (largest != i)
        {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;
            Swap(items[i], items[largest]);
            heapifyGiam(arr, n, largest);
        }
    }
    
    public void Swap(JButton btn1, JButton btn2) {
        int xBtn1 = btn1.getX();
        int xBtn2 = btn2.getX();
        
        int hei=btn1.getHeight();
        int wi=btn1.getWidth();
        currThread++;
        int cur = currThread;
        
        threads[cur] = new Thread(new Runnable() {
            @Override
            public void run() {
                    if (cur != 0) {
                        try {
                            threads[cur - 1].join();
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    btn1.setBackground(Color.BLUE);
                    btn2.setBackground(Color.BLUE);
                    int j1=0;
                    int j2=0;
                    while (j1 < 2) {
                        j1++;
                        btn1.setLocation(btn1.getX(), btn1.getY() - hei);
                        btn2.setLocation(btn2.getX(), btn2.getY() + hei);           
                        try {
                            Thread.sleep(time);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    while (btn1.getX() < xBtn2) {
                        btn1.setLocation(btn1.getX() + wi, btn1.getY());
                        btn2.setLocation(btn2.getX() - wi, btn2.getY());  
                        try {
                            Thread.sleep(time);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    while (j2<2) {
                        j2++;
                        btn1.setLocation(btn1.getX(), btn1.getY() + hei);
                        btn2.setLocation(btn2.getX(), btn2.getY() - hei); 
                        try {
                            Thread.sleep(time);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    String textBtn1 = btn1.getText();
                    btn1.setText(btn2.getText());
                    btn2.setText(textBtn1);
                    btn1.setLocation(xBtn1, hei*2);
                    btn2.setLocation(xBtn2, hei*2);
                    btn1.setBackground(Color.YELLOW);
                    btn2.setBackground(Color.YELLOW);
            }
        });
        threads[cur].start();
    }

    public void SetIndexList(int index) {
        currThread++;
        int curr=currThread;
        threads[curr] = new Thread(new Runnable() {
            @Override
            public void run() {
                if(curr!=0){
                    try {
                        threads[curr-1].join();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                lsCode.setSelectedIndex(index);
                lsCode.ensureIndexIsVisible(index);
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        threads[curr].start();
       
    }
    public void DrawMang(JPanel mang, JPanel chiSo, JButton[] a) {
        pnlChiSo.removeAll();
        pnlMoPhong.removeAll();
        pnlChiSo.repaint();
        pnlMoPhong.repaint();
        int n = arrays.length;
        int wItems = mang.getWidth() / n;
        int hItems = (mang.getHeight() / 5);
        int wChiSo = chiSo.getWidth() / n;
        int hChiSo = chiSo.getHeight();
        Point p, p1;
        for (int i = 0; i < n; i++) {
            p = new Point(i * wItems, hItems * 2);
            items[i].setSize(wItems, hItems);
            items[i].setLocation(p);
            items[i].setBackground(Color.yellow);
            pnlMoPhong.add(items[i]);

            p1 = new Point(i * wChiSo, 0);
            JButton btn = new JButton(i + "");
            btn.setSize(wChiSo, hChiSo);
            btn.setLocation(p1);
            btn.setBackground(Color.yellow);
            pnlChiSo.add(btn);
        }
    }
    public int[] ReadFile(String duongDan) {
        int[] mang = null;
        File f = new File(duongDan);
        if (!f.exists()) {
            try {
                f.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            Scanner scan = new Scanner(f);
            while (scan.hasNextLine()) {
                String line = scan.nextLine();
                String[] m = line.split(" ");
                mang = new int[m.length];
                for (int i = 0; i < m.length; i++) {
                    mang[i] = Integer.parseInt(m[i]);
                }

            }
            return mang;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    public void SetStateStart() {
        rbSelection.setSelected(true);
        rbTang.setSelected(true);
        slTocDo.setValue(1);
        btnBatDau.setEnabled(false);
    }
}
